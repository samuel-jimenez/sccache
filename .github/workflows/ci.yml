name: ci
on: [ push, pull_request ]

jobs:
  lint:
    name: ${{ matrix.component }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        component: [ clippy ]
        include:
          - component: rustfmt
            cargo_cmd: fmt -- --check
            os: ubuntu-latest
          - component: clippy
            cargo_cmd: clippy --locked --all-targets -- -D warnings -A unknown-lints -A clippy::type_complexity -A clippy::new-without-default
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          components: ${{ matrix.component }}
          # Oldest supported version, keep in sync with README.md
          toolchain: "1.75.0"

      - name: clippy version
        run: cargo clippy --version
        if: ${{ matrix.component == 'clippy' }}

      - name: Check
        run: cargo ${{ matrix.cargo_cmd }}

  check_features:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [ azure, gcs, gha, memcached, redis, s3, webdav ]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Check feature ${{ matrix.feature }}
        run: cargo check --no-default-features --features ${{ matrix.feature }}

  toml_format:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Check
        run: npx --yes @taplo/cli fmt --check

  coverage:
    name: coverage ${{ matrix.os }} rust ${{ matrix.rustc || 'stable' }} ${{ matrix.extra_desc }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure || false }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04

            # Oldest tested CUDA Toolkit version. Older CTKs might work, but they're
            # difficult to test without Ubuntu18.04 GHA runners or containerized jobs.
            cuda: "11.1"
            extra_desc: cuda11.1
            # Oldest supported version, keep in sync with README.md
            rustc: "1.75.0"

          - os: windows-2022
            cuda: "12.8"
            rustc: nightly
            allow_failure: true
            extra_args: --features=unstable
            extra_desc: cuda12.8

          - os: ubuntu-22.04
            cuda: "11.8"
            rustc: nightly
            allow_failure: true
            extra_args: --features=unstable
          - os: ubuntu-22.04
            rustc: "1.75.0"
            extra_desc: dist-server
            extra_args: --no-default-features --features=dist-tests test_dist_ -- --test-threads 1
          - os: macos-13
            rustc: nightly
            # # M1 CPU
          - os: macos-14
          - os: windows-2019
            cuda: "11.1"
            # Oldest supported version, keep in sync with README.md
            rustc: "1.75.0"
            extra_desc: cuda11.1
    # Disable on Windows for now as it fails with:
    # found invalid metadata files for crate `vte_generate_state_changes`
    #          - os: windows-2019
    #            rustc: nightly
    env:
      RUST_BACKTRACE: 1
      COVERAGE_REPORT_DIR: "target/debug"
      COVERAGE_REPORT_FILE: "target/debug/lcov.info"
      BINARY_DIR: "target/debug"
      GRCOV_IGNORE_OPTION: '--ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*"'
      GRCOV_EXCLUDE_OPTION: '--excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()"'
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          toolchain: ${{ matrix.rustc }}
          components: llvm-tools-preview

      - name: Install gcc & clang for tests
        run: sudo apt-get install -y clang gcc
        if: ${{ matrix.os == 'ubuntu-20.04' }}

      - if: matrix.cuda != '' && contains(fromJSON('["Linux", "Windows"]'), runner.os)
        name: Install nvcc
        uses: ./.github/actions/nvcc-toolchain
        with:
          cuda-version: ${{ matrix.cuda }}

      - name: "`grcov` ~ install"
        run: cargo install grcov

      - name: Create config for testing
        run: |
          mkdir -p .cargo
          echo '[env]
          LLVM_PROFILE_FILE = { value = "target/debug/coverage/default-%p-%8m.profraw", relative = true }' >> .cargo/config.toml

      - name: Execute tests
        run: cargo test --no-fail-fast --locked --all-targets ${{ matrix.extra_args }}
        env:
          CARGO_INCREMENTAL: "0"
          RUSTC_WRAPPER: ""
          RUSTFLAGS: "-Cinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off"


      - name: Display coverage files
        shell: bash
        run:
          grcov . -s . --binary-path $BINARY_DIR --output-type files $GRCOV_IGNORE_OPTION $GRCOV_EXCLUDE_OPTION | sort --unique

      - name: Generate coverage data (via `grcov`)
        id: coverage
        shell: bash
        run: |
          mkdir -p "${COVERAGE_REPORT_DIR}"
          grcov . -s . --binary-path $BINARY_DIR --output-type lcov --output-path "${COVERAGE_REPORT_FILE}" --branch $GRCOV_IGNORE_OPTION $GRCOV_EXCLUDE_OPTION
          echo "report=${COVERAGE_REPORT_FILE}" >> $GITHUB_OUTPUT


      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@v5
        with:
          files: ${{ steps.coverage.outputs.report }}
          ## flags: IntegrationTests, UnitTests, ${{ steps.vars.outputs.CODECOV_FLAGS }}
          flags: ${{ steps.vars.outputs.CODECOV_FLAGS }}
          name: codecov-umbrella-${{ matrix.os }}-rust ${{ matrix.rustc || 'stable' }}-${{ matrix.extra_desc }}

          fail_ci_if_error: true
          # verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test_freebsd:
    name: test freebsd-14.1 rust stable
    runs-on: ${{ matrix.job.os }}
    timeout-minutes: 70
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-22.04 }
    steps:
      - uses: actions/checkout@v4
      - name: Prepare, build and test
        uses: vmactions/freebsd-vm@v1
        with:
          mem: 8192
          usesh: true
          sync: rsync
          copyback: false
          prepare: pkg install -y ca_root_nss curl gmake gtar pot sudo
          run: |
            #####################################################################################
            ###  Prepare, build, and test
            #####################################################################################
            ###  based on ref: <https://github.com/rust-lang/rustup/pull/2783>
            ###  and on ref: <https://github.com/uutils/coreutils/commit/86c610a84b8b6c>
            ###  * NOTE: All steps need to be run in this block, otherwise, we are operating back
            ###    on the mac host.
            set -exo pipefail
            #
            ### Basic user setup ################################################################
            TEST_USER=tester
            TEST_USER_HOME="/opt/$TEST_USER"
            REPO_NAME=${GITHUB_WORKSPACE##*/}
            WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
            WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"
            export WORKSPACE
            #
            mkdir -p "$TEST_USER_HOME"
            pw adduser -n "$TEST_USER" -d "$TEST_USER_HOME" -c "Tester" -h -
            chown -R "$TEST_USER":"$TEST_USER" "$TEST_USER_HOME"
            chown -R "$TEST_USER":"$TEST_USER" "/$WORKSPACE_PARENT"/
            cat > /usr/local/etc/sudoers.d/wheel<<EOF
            $TEST_USER ALL=(ALL) NOPASSWD: ALL
            EOF
            #
            ### Install rust stable from rustup  ################################################
            su "$TEST_USER" -c "/bin/sh -exo pipefail" <<"EOH"
            whoami
            echo "$HOME"
            fetch -o /tmp/rustup.sh https://sh.rustup.rs
            sh /tmp/rustup.sh -y --profile=minimal
            ### Run tests #######################################################################
            . "$HOME/.cargo/env"
            "$WORKSPACE/scripts/freebsd-ci-test.sh"
            EOH
            # end
      - name: Upload failure
        if: failure()
        uses: ./.github/actions/artifact_failure
        with:
          name: test-freebsd-14.1-stable
